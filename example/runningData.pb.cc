// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runningData.proto

#include "runningData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace runningData {
PROTOBUF_CONSTEXPR MemoryUsage::MemoryUsage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.memory_usage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemoryUsageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryUsageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryUsageDefaultTypeInternal() {}
  union {
    MemoryUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryUsageDefaultTypeInternal _MemoryUsage_default_instance_;
PROTOBUF_CONSTEXPR NetworkInterface::NetworkInterface(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interface_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetworkInterfaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkInterfaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkInterfaceDefaultTypeInternal() {}
  union {
    NetworkInterface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkInterfaceDefaultTypeInternal _NetworkInterface_default_instance_;
PROTOBUF_CONSTEXPR NetworkStats::NetworkStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.receive_packets_)*/int64_t{0}
  , /*decltype(_impl_.transmit_packets_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetworkStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkStatsDefaultTypeInternal() {}
  union {
    NetworkStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkStatsDefaultTypeInternal _NetworkStats_default_instance_;
PROTOBUF_CONSTEXPR CPULoad::CPULoad(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.avg_load_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CPULoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPULoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPULoadDefaultTypeInternal() {}
  union {
    CPULoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPULoadDefaultTypeInternal _CPULoad_default_instance_;
}  // namespace runningData
static ::_pb::Metadata file_level_metadata_runningData_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_runningData_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_runningData_2eproto[1];

const uint32_t TableStruct_runningData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runningData::MemoryUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::runningData::MemoryUsage, _impl_.memory_usage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runningData::NetworkInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::runningData::NetworkInterface, _impl_.interface_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runningData::NetworkStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::runningData::NetworkStats, _impl_.receive_packets_),
  PROTOBUF_FIELD_OFFSET(::runningData::NetworkStats, _impl_.transmit_packets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::runningData::CPULoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::runningData::CPULoad, _impl_.avg_load_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::runningData::MemoryUsage)},
  { 7, -1, -1, sizeof(::runningData::NetworkInterface)},
  { 14, -1, -1, sizeof(::runningData::NetworkStats)},
  { 22, -1, -1, sizeof(::runningData::CPULoad)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::runningData::_MemoryUsage_default_instance_._instance,
  &::runningData::_NetworkInterface_default_instance_._instance,
  &::runningData::_NetworkStats_default_instance_._instance,
  &::runningData::_CPULoad_default_instance_._instance,
};

const char descriptor_table_protodef_runningData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021runningData.proto\022\013runningData\032\033google"
  "/protobuf/empty.proto\"#\n\013MemoryUsage\022\024\n\014"
  "memory_usage\030\001 \001(\001\"*\n\020NetworkInterface\022\026"
  "\n\016interface_name\030\001 \001(\t\"A\n\014NetworkStats\022\027"
  "\n\017receive_packets\030\001 \001(\003\022\030\n\020transmit_pack"
  "ets\030\002 \001(\003\"\033\n\007CPULoad\022\020\n\010avg_load\030\001 \003(\0012\347"
  "\001\n\022runningDataService\022H\n\024CalculateMemory"
  "Usage\022\026.google.protobuf.Empty\032\030.runningD"
  "ata.MemoryUsage\022K\n\017GetNetworkStats\022\035.run"
  "ningData.NetworkInterface\032\031.runningData."
  "NetworkStats\022:\n\nGetCPULoad\022\026.google.prot"
  "obuf.Empty\032\024.runningData.CPULoadB\003\200\001\001b\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_runningData_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_runningData_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_runningData_2eproto = {
    false, false, 485, descriptor_table_protodef_runningData_2eproto,
    "runningData.proto",
    &descriptor_table_runningData_2eproto_once, descriptor_table_runningData_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_runningData_2eproto::offsets,
    file_level_metadata_runningData_2eproto, file_level_enum_descriptors_runningData_2eproto,
    file_level_service_descriptors_runningData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_runningData_2eproto_getter() {
  return &descriptor_table_runningData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_runningData_2eproto(&descriptor_table_runningData_2eproto);
namespace runningData {

// ===================================================================

class MemoryUsage::_Internal {
 public:
};

MemoryUsage::MemoryUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:runningData.MemoryUsage)
}
MemoryUsage::MemoryUsage(const MemoryUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemoryUsage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.memory_usage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.memory_usage_ = from._impl_.memory_usage_;
  // @@protoc_insertion_point(copy_constructor:runningData.MemoryUsage)
}

inline void MemoryUsage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.memory_usage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MemoryUsage::~MemoryUsage() {
  // @@protoc_insertion_point(destructor:runningData.MemoryUsage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoryUsage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:runningData.MemoryUsage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.memory_usage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryUsage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double memory_usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.memory_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryUsage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runningData.MemoryUsage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double memory_usage = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage = this->_internal_memory_usage();
  uint64_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_memory_usage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runningData.MemoryUsage)
  return target;
}

size_t MemoryUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runningData.MemoryUsage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double memory_usage = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage = this->_internal_memory_usage();
  uint64_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoryUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemoryUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoryUsage::GetClassData() const { return &_class_data_; }


void MemoryUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemoryUsage*>(&to_msg);
  auto& from = static_cast<const MemoryUsage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:runningData.MemoryUsage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_usage = from._internal_memory_usage();
  uint64_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    _this->_internal_set_memory_usage(from._internal_memory_usage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryUsage::CopyFrom(const MemoryUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runningData.MemoryUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryUsage::IsInitialized() const {
  return true;
}

void MemoryUsage::InternalSwap(MemoryUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.memory_usage_, other->_impl_.memory_usage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryUsage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_runningData_2eproto_getter, &descriptor_table_runningData_2eproto_once,
      file_level_metadata_runningData_2eproto[0]);
}

// ===================================================================

class NetworkInterface::_Internal {
 public:
};

NetworkInterface::NetworkInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:runningData.NetworkInterface)
}
NetworkInterface::NetworkInterface(const NetworkInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkInterface* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interface_name().empty()) {
    _this->_impl_.interface_name_.Set(from._internal_interface_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:runningData.NetworkInterface)
}

inline void NetworkInterface::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interface_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetworkInterface::~NetworkInterface() {
  // @@protoc_insertion_point(destructor:runningData.NetworkInterface)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkInterface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_name_.Destroy();
}

void NetworkInterface::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:runningData.NetworkInterface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interface_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkInterface::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string interface_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interface_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "runningData.NetworkInterface.interface_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkInterface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runningData.NetworkInterface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string interface_name = 1;
  if (!this->_internal_interface_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_name().data(), static_cast<int>(this->_internal_interface_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "runningData.NetworkInterface.interface_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interface_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runningData.NetworkInterface)
  return target;
}

size_t NetworkInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runningData.NetworkInterface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interface_name = 1;
  if (!this->_internal_interface_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkInterface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkInterface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkInterface::GetClassData() const { return &_class_data_; }


void NetworkInterface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkInterface*>(&to_msg);
  auto& from = static_cast<const NetworkInterface&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:runningData.NetworkInterface)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interface_name().empty()) {
    _this->_internal_set_interface_name(from._internal_interface_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkInterface::CopyFrom(const NetworkInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runningData.NetworkInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInterface::IsInitialized() const {
  return true;
}

void NetworkInterface::InternalSwap(NetworkInterface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_name_, lhs_arena,
      &other->_impl_.interface_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkInterface::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_runningData_2eproto_getter, &descriptor_table_runningData_2eproto_once,
      file_level_metadata_runningData_2eproto[1]);
}

// ===================================================================

class NetworkStats::_Internal {
 public:
};

NetworkStats::NetworkStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:runningData.NetworkStats)
}
NetworkStats::NetworkStats(const NetworkStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.receive_packets_){}
    , decltype(_impl_.transmit_packets_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.receive_packets_, &from._impl_.receive_packets_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.transmit_packets_) -
    reinterpret_cast<char*>(&_impl_.receive_packets_)) + sizeof(_impl_.transmit_packets_));
  // @@protoc_insertion_point(copy_constructor:runningData.NetworkStats)
}

inline void NetworkStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.receive_packets_){int64_t{0}}
    , decltype(_impl_.transmit_packets_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetworkStats::~NetworkStats() {
  // @@protoc_insertion_point(destructor:runningData.NetworkStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetworkStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkStats::Clear() {
// @@protoc_insertion_point(message_clear_start:runningData.NetworkStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.receive_packets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.transmit_packets_) -
      reinterpret_cast<char*>(&_impl_.receive_packets_)) + sizeof(_impl_.transmit_packets_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 receive_packets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.receive_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 transmit_packets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.transmit_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runningData.NetworkStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 receive_packets = 1;
  if (this->_internal_receive_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_receive_packets(), target);
  }

  // int64 transmit_packets = 2;
  if (this->_internal_transmit_packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_transmit_packets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runningData.NetworkStats)
  return target;
}

size_t NetworkStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runningData.NetworkStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 receive_packets = 1;
  if (this->_internal_receive_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_receive_packets());
  }

  // int64 transmit_packets = 2;
  if (this->_internal_transmit_packets() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_transmit_packets());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkStats::GetClassData() const { return &_class_data_; }


void NetworkStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkStats*>(&to_msg);
  auto& from = static_cast<const NetworkStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:runningData.NetworkStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_receive_packets() != 0) {
    _this->_internal_set_receive_packets(from._internal_receive_packets());
  }
  if (from._internal_transmit_packets() != 0) {
    _this->_internal_set_transmit_packets(from._internal_transmit_packets());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkStats::CopyFrom(const NetworkStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runningData.NetworkStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStats::IsInitialized() const {
  return true;
}

void NetworkStats::InternalSwap(NetworkStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.transmit_packets_)
      + sizeof(NetworkStats::_impl_.transmit_packets_)
      - PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.receive_packets_)>(
          reinterpret_cast<char*>(&_impl_.receive_packets_),
          reinterpret_cast<char*>(&other->_impl_.receive_packets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_runningData_2eproto_getter, &descriptor_table_runningData_2eproto_once,
      file_level_metadata_runningData_2eproto[2]);
}

// ===================================================================

class CPULoad::_Internal {
 public:
};

CPULoad::CPULoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:runningData.CPULoad)
}
CPULoad::CPULoad(const CPULoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPULoad* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.avg_load_){from._impl_.avg_load_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:runningData.CPULoad)
}

inline void CPULoad::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.avg_load_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CPULoad::~CPULoad() {
  // @@protoc_insertion_point(destructor:runningData.CPULoad)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPULoad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.avg_load_.~RepeatedField();
}

void CPULoad::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPULoad::Clear() {
// @@protoc_insertion_point(message_clear_start:runningData.CPULoad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.avg_load_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPULoad::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double avg_load = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_avg_load(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_avg_load(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPULoad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:runningData.CPULoad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double avg_load = 1;
  if (this->_internal_avg_load_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_avg_load(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:runningData.CPULoad)
  return target;
}

size_t CPULoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:runningData.CPULoad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double avg_load = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_avg_load_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPULoad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPULoad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPULoad::GetClassData() const { return &_class_data_; }


void CPULoad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPULoad*>(&to_msg);
  auto& from = static_cast<const CPULoad&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:runningData.CPULoad)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.avg_load_.MergeFrom(from._impl_.avg_load_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPULoad::CopyFrom(const CPULoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:runningData.CPULoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPULoad::IsInitialized() const {
  return true;
}

void CPULoad::InternalSwap(CPULoad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.avg_load_.InternalSwap(&other->_impl_.avg_load_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPULoad::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_runningData_2eproto_getter, &descriptor_table_runningData_2eproto_once,
      file_level_metadata_runningData_2eproto[3]);
}

// ===================================================================

runningDataService::~runningDataService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* runningDataService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_runningData_2eproto);
  return file_level_service_descriptors_runningData_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* runningDataService::GetDescriptor() {
  return descriptor();
}

void runningDataService::CalculateMemoryUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::PROTOBUF_NAMESPACE_ID::Empty*,
                         ::runningData::MemoryUsage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CalculateMemoryUsage() not implemented.");
  done->Run();
}

void runningDataService::GetNetworkStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::runningData::NetworkInterface*,
                         ::runningData::NetworkStats*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetNetworkStats() not implemented.");
  done->Run();
}

void runningDataService::GetCPULoad(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::PROTOBUF_NAMESPACE_ID::Empty*,
                         ::runningData::CPULoad*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCPULoad() not implemented.");
  done->Run();
}

void runningDataService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_runningData_2eproto[0]);
  switch(method->index()) {
    case 0:
      CalculateMemoryUsage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::PROTOBUF_NAMESPACE_ID::Empty*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::runningData::MemoryUsage*>(
                 response),
             done);
      break;
    case 1:
      GetNetworkStats(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::runningData::NetworkInterface*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::runningData::NetworkStats*>(
                 response),
             done);
      break;
    case 2:
      GetCPULoad(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::PROTOBUF_NAMESPACE_ID::Empty*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::runningData::CPULoad*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& runningDataService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::PROTOBUF_NAMESPACE_ID::Empty::default_instance();
    case 1:
      return ::runningData::NetworkInterface::default_instance();
    case 2:
      return ::PROTOBUF_NAMESPACE_ID::Empty::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& runningDataService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::runningData::MemoryUsage::default_instance();
    case 1:
      return ::runningData::NetworkStats::default_instance();
    case 2:
      return ::runningData::CPULoad::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

runningDataService_Stub::runningDataService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
runningDataService_Stub::runningDataService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
runningDataService_Stub::~runningDataService_Stub() {
  if (owns_channel_) delete channel_;
}

void runningDataService_Stub::CalculateMemoryUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::PROTOBUF_NAMESPACE_ID::Empty* request,
                              ::runningData::MemoryUsage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void runningDataService_Stub::GetNetworkStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::runningData::NetworkInterface* request,
                              ::runningData::NetworkStats* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void runningDataService_Stub::GetCPULoad(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::PROTOBUF_NAMESPACE_ID::Empty* request,
                              ::runningData::CPULoad* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace runningData
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::runningData::MemoryUsage*
Arena::CreateMaybeMessage< ::runningData::MemoryUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runningData::MemoryUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::runningData::NetworkInterface*
Arena::CreateMaybeMessage< ::runningData::NetworkInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runningData::NetworkInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::runningData::NetworkStats*
Arena::CreateMaybeMessage< ::runningData::NetworkStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runningData::NetworkStats >(arena);
}
template<> PROTOBUF_NOINLINE ::runningData::CPULoad*
Arena::CreateMaybeMessage< ::runningData::CPULoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::runningData::CPULoad >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
