// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runningData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_runningData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_runningData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_runningData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_runningData_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runningData_2eproto;
namespace runningData {
class CPULoad;
struct CPULoadDefaultTypeInternal;
extern CPULoadDefaultTypeInternal _CPULoad_default_instance_;
class MemoryUsage;
struct MemoryUsageDefaultTypeInternal;
extern MemoryUsageDefaultTypeInternal _MemoryUsage_default_instance_;
class NetworkInterface;
struct NetworkInterfaceDefaultTypeInternal;
extern NetworkInterfaceDefaultTypeInternal _NetworkInterface_default_instance_;
class NetworkStats;
struct NetworkStatsDefaultTypeInternal;
extern NetworkStatsDefaultTypeInternal _NetworkStats_default_instance_;
}  // namespace runningData
PROTOBUF_NAMESPACE_OPEN
template<> ::runningData::CPULoad* Arena::CreateMaybeMessage<::runningData::CPULoad>(Arena*);
template<> ::runningData::MemoryUsage* Arena::CreateMaybeMessage<::runningData::MemoryUsage>(Arena*);
template<> ::runningData::NetworkInterface* Arena::CreateMaybeMessage<::runningData::NetworkInterface>(Arena*);
template<> ::runningData::NetworkStats* Arena::CreateMaybeMessage<::runningData::NetworkStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace runningData {

// ===================================================================

class MemoryUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runningData.MemoryUsage) */ {
 public:
  inline MemoryUsage() : MemoryUsage(nullptr) {}
  ~MemoryUsage() override;
  explicit PROTOBUF_CONSTEXPR MemoryUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryUsage(const MemoryUsage& from);
  MemoryUsage(MemoryUsage&& from) noexcept
    : MemoryUsage() {
    *this = ::std::move(from);
  }

  inline MemoryUsage& operator=(const MemoryUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryUsage& operator=(MemoryUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryUsage* internal_default_instance() {
    return reinterpret_cast<const MemoryUsage*>(
               &_MemoryUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemoryUsage& a, MemoryUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MemoryUsage& from) {
    MemoryUsage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryUsage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runningData.MemoryUsage";
  }
  protected:
  explicit MemoryUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryUsageFieldNumber = 1,
  };
  // double memory_usage = 1;
  void clear_memory_usage();
  double memory_usage() const;
  void set_memory_usage(double value);
  private:
  double _internal_memory_usage() const;
  void _internal_set_memory_usage(double value);
  public:

  // @@protoc_insertion_point(class_scope:runningData.MemoryUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double memory_usage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_runningData_2eproto;
};
// -------------------------------------------------------------------

class NetworkInterface final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runningData.NetworkInterface) */ {
 public:
  inline NetworkInterface() : NetworkInterface(nullptr) {}
  ~NetworkInterface() override;
  explicit PROTOBUF_CONSTEXPR NetworkInterface(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkInterface(const NetworkInterface& from);
  NetworkInterface(NetworkInterface&& from) noexcept
    : NetworkInterface() {
    *this = ::std::move(from);
  }

  inline NetworkInterface& operator=(const NetworkInterface& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkInterface& operator=(NetworkInterface&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkInterface& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkInterface* internal_default_instance() {
    return reinterpret_cast<const NetworkInterface*>(
               &_NetworkInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetworkInterface& a, NetworkInterface& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkInterface* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkInterface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkInterface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkInterface>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkInterface& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetworkInterface& from) {
    NetworkInterface::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInterface* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runningData.NetworkInterface";
  }
  protected:
  explicit NetworkInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceNameFieldNumber = 1,
  };
  // string interface_name = 1;
  void clear_interface_name();
  const std::string& interface_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interface_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interface_name();
  PROTOBUF_NODISCARD std::string* release_interface_name();
  void set_allocated_interface_name(std::string* interface_name);
  private:
  const std::string& _internal_interface_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_name(const std::string& value);
  std::string* _internal_mutable_interface_name();
  public:

  // @@protoc_insertion_point(class_scope:runningData.NetworkInterface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_runningData_2eproto;
};
// -------------------------------------------------------------------

class NetworkStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runningData.NetworkStats) */ {
 public:
  inline NetworkStats() : NetworkStats(nullptr) {}
  ~NetworkStats() override;
  explicit PROTOBUF_CONSTEXPR NetworkStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkStats(const NetworkStats& from);
  NetworkStats(NetworkStats&& from) noexcept
    : NetworkStats() {
    *this = ::std::move(from);
  }

  inline NetworkStats& operator=(const NetworkStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkStats& operator=(NetworkStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkStats* internal_default_instance() {
    return reinterpret_cast<const NetworkStats*>(
               &_NetworkStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetworkStats& a, NetworkStats& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetworkStats& from) {
    NetworkStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runningData.NetworkStats";
  }
  protected:
  explicit NetworkStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceivePacketsFieldNumber = 1,
    kTransmitPacketsFieldNumber = 2,
  };
  // int64 receive_packets = 1;
  void clear_receive_packets();
  int64_t receive_packets() const;
  void set_receive_packets(int64_t value);
  private:
  int64_t _internal_receive_packets() const;
  void _internal_set_receive_packets(int64_t value);
  public:

  // int64 transmit_packets = 2;
  void clear_transmit_packets();
  int64_t transmit_packets() const;
  void set_transmit_packets(int64_t value);
  private:
  int64_t _internal_transmit_packets() const;
  void _internal_set_transmit_packets(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:runningData.NetworkStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t receive_packets_;
    int64_t transmit_packets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_runningData_2eproto;
};
// -------------------------------------------------------------------

class CPULoad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:runningData.CPULoad) */ {
 public:
  inline CPULoad() : CPULoad(nullptr) {}
  ~CPULoad() override;
  explicit PROTOBUF_CONSTEXPR CPULoad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPULoad(const CPULoad& from);
  CPULoad(CPULoad&& from) noexcept
    : CPULoad() {
    *this = ::std::move(from);
  }

  inline CPULoad& operator=(const CPULoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPULoad& operator=(CPULoad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPULoad& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPULoad* internal_default_instance() {
    return reinterpret_cast<const CPULoad*>(
               &_CPULoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CPULoad& a, CPULoad& b) {
    a.Swap(&b);
  }
  inline void Swap(CPULoad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPULoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPULoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPULoad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPULoad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CPULoad& from) {
    CPULoad::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPULoad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "runningData.CPULoad";
  }
  protected:
  explicit CPULoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvgLoadFieldNumber = 1,
  };
  // repeated double avg_load = 1;
  int avg_load_size() const;
  private:
  int _internal_avg_load_size() const;
  public:
  void clear_avg_load();
  private:
  double _internal_avg_load(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_avg_load() const;
  void _internal_add_avg_load(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_avg_load();
  public:
  double avg_load(int index) const;
  void set_avg_load(int index, double value);
  void add_avg_load(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      avg_load() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_avg_load();

  // @@protoc_insertion_point(class_scope:runningData.CPULoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > avg_load_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_runningData_2eproto;
};
// ===================================================================

class runningDataService_Stub;

class runningDataService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline runningDataService() {};
 public:
  virtual ~runningDataService();

  typedef runningDataService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void CalculateMemoryUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::PROTOBUF_NAMESPACE_ID::Empty* request,
                       ::runningData::MemoryUsage* response,
                       ::google::protobuf::Closure* done);
  virtual void GetNetworkStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::runningData::NetworkInterface* request,
                       ::runningData::NetworkStats* response,
                       ::google::protobuf::Closure* done);
  virtual void GetCPULoad(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::PROTOBUF_NAMESPACE_ID::Empty* request,
                       ::runningData::CPULoad* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(runningDataService);
};

class runningDataService_Stub : public runningDataService {
 public:
  runningDataService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  runningDataService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~runningDataService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements runningDataService ------------------------------------------

  void CalculateMemoryUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::PROTOBUF_NAMESPACE_ID::Empty* request,
                       ::runningData::MemoryUsage* response,
                       ::google::protobuf::Closure* done);
  void GetNetworkStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::runningData::NetworkInterface* request,
                       ::runningData::NetworkStats* response,
                       ::google::protobuf::Closure* done);
  void GetCPULoad(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::PROTOBUF_NAMESPACE_ID::Empty* request,
                       ::runningData::CPULoad* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(runningDataService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemoryUsage

// double memory_usage = 1;
inline void MemoryUsage::clear_memory_usage() {
  _impl_.memory_usage_ = 0;
}
inline double MemoryUsage::_internal_memory_usage() const {
  return _impl_.memory_usage_;
}
inline double MemoryUsage::memory_usage() const {
  // @@protoc_insertion_point(field_get:runningData.MemoryUsage.memory_usage)
  return _internal_memory_usage();
}
inline void MemoryUsage::_internal_set_memory_usage(double value) {
  
  _impl_.memory_usage_ = value;
}
inline void MemoryUsage::set_memory_usage(double value) {
  _internal_set_memory_usage(value);
  // @@protoc_insertion_point(field_set:runningData.MemoryUsage.memory_usage)
}

// -------------------------------------------------------------------

// NetworkInterface

// string interface_name = 1;
inline void NetworkInterface::clear_interface_name() {
  _impl_.interface_name_.ClearToEmpty();
}
inline const std::string& NetworkInterface::interface_name() const {
  // @@protoc_insertion_point(field_get:runningData.NetworkInterface.interface_name)
  return _internal_interface_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkInterface::set_interface_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interface_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:runningData.NetworkInterface.interface_name)
}
inline std::string* NetworkInterface::mutable_interface_name() {
  std::string* _s = _internal_mutable_interface_name();
  // @@protoc_insertion_point(field_mutable:runningData.NetworkInterface.interface_name)
  return _s;
}
inline const std::string& NetworkInterface::_internal_interface_name() const {
  return _impl_.interface_name_.Get();
}
inline void NetworkInterface::_internal_set_interface_name(const std::string& value) {
  
  _impl_.interface_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkInterface::_internal_mutable_interface_name() {
  
  return _impl_.interface_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkInterface::release_interface_name() {
  // @@protoc_insertion_point(field_release:runningData.NetworkInterface.interface_name)
  return _impl_.interface_name_.Release();
}
inline void NetworkInterface::set_allocated_interface_name(std::string* interface_name) {
  if (interface_name != nullptr) {
    
  } else {
    
  }
  _impl_.interface_name_.SetAllocated(interface_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interface_name_.IsDefault()) {
    _impl_.interface_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:runningData.NetworkInterface.interface_name)
}

// -------------------------------------------------------------------

// NetworkStats

// int64 receive_packets = 1;
inline void NetworkStats::clear_receive_packets() {
  _impl_.receive_packets_ = int64_t{0};
}
inline int64_t NetworkStats::_internal_receive_packets() const {
  return _impl_.receive_packets_;
}
inline int64_t NetworkStats::receive_packets() const {
  // @@protoc_insertion_point(field_get:runningData.NetworkStats.receive_packets)
  return _internal_receive_packets();
}
inline void NetworkStats::_internal_set_receive_packets(int64_t value) {
  
  _impl_.receive_packets_ = value;
}
inline void NetworkStats::set_receive_packets(int64_t value) {
  _internal_set_receive_packets(value);
  // @@protoc_insertion_point(field_set:runningData.NetworkStats.receive_packets)
}

// int64 transmit_packets = 2;
inline void NetworkStats::clear_transmit_packets() {
  _impl_.transmit_packets_ = int64_t{0};
}
inline int64_t NetworkStats::_internal_transmit_packets() const {
  return _impl_.transmit_packets_;
}
inline int64_t NetworkStats::transmit_packets() const {
  // @@protoc_insertion_point(field_get:runningData.NetworkStats.transmit_packets)
  return _internal_transmit_packets();
}
inline void NetworkStats::_internal_set_transmit_packets(int64_t value) {
  
  _impl_.transmit_packets_ = value;
}
inline void NetworkStats::set_transmit_packets(int64_t value) {
  _internal_set_transmit_packets(value);
  // @@protoc_insertion_point(field_set:runningData.NetworkStats.transmit_packets)
}

// -------------------------------------------------------------------

// CPULoad

// repeated double avg_load = 1;
inline int CPULoad::_internal_avg_load_size() const {
  return _impl_.avg_load_.size();
}
inline int CPULoad::avg_load_size() const {
  return _internal_avg_load_size();
}
inline void CPULoad::clear_avg_load() {
  _impl_.avg_load_.Clear();
}
inline double CPULoad::_internal_avg_load(int index) const {
  return _impl_.avg_load_.Get(index);
}
inline double CPULoad::avg_load(int index) const {
  // @@protoc_insertion_point(field_get:runningData.CPULoad.avg_load)
  return _internal_avg_load(index);
}
inline void CPULoad::set_avg_load(int index, double value) {
  _impl_.avg_load_.Set(index, value);
  // @@protoc_insertion_point(field_set:runningData.CPULoad.avg_load)
}
inline void CPULoad::_internal_add_avg_load(double value) {
  _impl_.avg_load_.Add(value);
}
inline void CPULoad::add_avg_load(double value) {
  _internal_add_avg_load(value);
  // @@protoc_insertion_point(field_add:runningData.CPULoad.avg_load)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CPULoad::_internal_avg_load() const {
  return _impl_.avg_load_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CPULoad::avg_load() const {
  // @@protoc_insertion_point(field_list:runningData.CPULoad.avg_load)
  return _internal_avg_load();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CPULoad::_internal_mutable_avg_load() {
  return &_impl_.avg_load_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CPULoad::mutable_avg_load() {
  // @@protoc_insertion_point(field_mutable_list:runningData.CPULoad.avg_load)
  return _internal_mutable_avg_load();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace runningData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_runningData_2eproto
